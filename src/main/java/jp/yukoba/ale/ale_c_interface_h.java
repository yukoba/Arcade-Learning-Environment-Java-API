// Generated by jextract

package jp.yukoba.ale;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ale_c_interface_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define _VCRT_COMPILER_PREPROCESSOR 1
     * }
     */
    public static int _VCRT_COMPILER_PREPROCESSOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SAL_VERSION 20
     * }
     */
    public static int _SAL_VERSION() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define __SAL_H_VERSION 180000000
     * }
     */
    public static int __SAL_H_VERSION() {
        return (int)180000000L;
    }
    /**
     * {@snippet :
     * #define _USE_DECLSPECS_FOR_SAL 0
     * }
     */
    public static int _USE_DECLSPECS_FOR_SAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _USE_ATTRIBUTES_FOR_SAL 0
     * }
     */
    public static int _USE_ATTRIBUTES_FOR_SAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _CRT_PACKING 8
     * }
     */
    public static int _CRT_PACKING() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _HAS_EXCEPTIONS 1
     * }
     */
    public static int _HAS_EXCEPTIONS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX17 0
     * }
     */
    public static int _HAS_CXX17() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX20 0
     * }
     */
    public static int _HAS_CXX20() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX23 0
     * }
     */
    public static int _HAS_CXX23() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_CXX26 0
     * }
     */
    public static int _HAS_CXX26() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _HAS_NODISCARD 0
     * }
     */
    public static int _HAS_NODISCARD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN 0
     * }
     */
    public static int WCHAR_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 65535
     * }
     */
    public static int WCHAR_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 65535
     * }
     */
    public static int WINT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned long long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* va_list;
     * }
     */
    public static final AddressLayout va_list = RuntimeHelper.POINTER;
    public static MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"__va_start");
    }
    /**
     * {@snippet :
     * void __va_start(va_list*,...);
     * }
     */
    public static void __va_start(MemorySegment x0, Object... x1) {
        var mh$ = __va_start$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short wchar_t;
     * }
     */
    public static final OfShort wchar_t = JAVA_SHORT;
    public static MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"__security_init_cookie");
    }
    /**
     * {@snippet :
     * void __security_init_cookie();
     * }
     */
    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"__security_check_cookie");
    }
    /**
     * {@snippet :
     * void __security_check_cookie(uintptr_t _StackCookie);
     * }
     */
    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$0,"__report_gsfailure");
    }
    /**
     * {@snippet :
     * void __report_gsfailure(uintptr_t _StackCookie);
     * }
     */
    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __security_cookie$LAYOUT() {
        return JAVA_LONG;
    }
    public static VarHandle __security_cookie$VH() {
        return constants$1.const$1;
    }
    public static MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.const$2,"__security_cookie");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * uintptr_t __security_cookie;
     * }
     */
    public static long __security_cookie$get() {
        return (long) constants$1.const$1.get(RuntimeHelper.requireNonNull(constants$1.const$2, "__security_cookie"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * uintptr_t __security_cookie;
     * }
     */
    public static void __security_cookie$set(long x) {
        constants$1.const$1.set(RuntimeHelper.requireNonNull(constants$1.const$2, "__security_cookie"), x);
    }
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef int int_fast16_t;
     * }
     */
    public static final OfInt int_fast16_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     * }
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast16_t;
     * }
     */
    public static final OfInt uint_fast16_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     * }
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef double max_align_t;
     * }
     */
    public static final OfDouble max_align_t = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef struct ALEInterface_c* ALEInterface_handle;
     * }
     */
    public static final AddressLayout ALEInterface_handle = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct ALEState_c* ALEState_handle;
     * }
     */
    public static final AddressLayout ALEState_handle = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct ScreenExporter_c* ScreenExporter_handle;
     * }
     */
    public static final AddressLayout ScreenExporter_handle = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int Action;
     * }
     */
    public static final OfInt Action = JAVA_INT;
    /**
     * {@snippet :
     * typedef float reward_t;
     * }
     */
    public static final OfFloat reward_t = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef int game_mode_t;
     * }
     */
    public static final OfInt game_mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int difficulty_t;
     * }
     */
    public static final OfInt difficulty_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char byte_t;
     * }
     */
    public static final OfByte byte_t = JAVA_BYTE;
    public static MethodHandle ale_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"ale_create");
    }
    /**
     * {@snippet :
     * ALEInterface_handle ale_create(,...);
     * }
     */
    public static MemorySegment ale_create(Object... x0) {
        var mh$ = ale_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_create_with_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"ale_create_with_display");
    }
    /**
     * {@snippet :
     * ALEInterface_handle ale_create_with_display(_Bool display_screen);
     * }
     */
    public static MemorySegment ale_create_with_display(boolean display_screen) {
        var mh$ = ale_create_with_display$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(display_screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$0,"ale_destroy");
    }
    /**
     * {@snippet :
     * void ale_destroy(ALEInterface_handle ale);
     * }
     */
    public static void ale_destroy(MemorySegment ale) {
        var mh$ = ale_destroy$MH();
        try {
            mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getString$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$2,"ale_getString");
    }
    /**
     * {@snippet :
     * int ale_getString(ALEInterface_handle ale, char* key, char* output_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getString(MemorySegment ale, MemorySegment key, MemorySegment output_buffer, long buffer_size) {
        var mh$ = ale_getString$MH();
        try {
            return (int)mh$.invokeExact(ale, key, output_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getInt$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"ale_getInt");
    }
    /**
     * {@snippet :
     * int ale_getInt(ALEInterface_handle ale, char* key);
     * }
     */
    public static int ale_getInt(MemorySegment ale, MemorySegment key) {
        var mh$ = ale_getInt$MH();
        try {
            return (int)mh$.invokeExact(ale, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getBool$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$6,"ale_getBool");
    }
    /**
     * {@snippet :
     * _Bool ale_getBool(ALEInterface_handle ale, char* key);
     * }
     */
    public static boolean ale_getBool(MemorySegment ale, MemorySegment key) {
        var mh$ = ale_getBool$MH();
        try {
            return (boolean)mh$.invokeExact(ale, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getFloat$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"ale_getFloat");
    }
    /**
     * {@snippet :
     * float ale_getFloat(ALEInterface_handle ale, char* key);
     * }
     */
    public static float ale_getFloat(MemorySegment ale, MemorySegment key) {
        var mh$ = ale_getFloat$MH();
        try {
            return (float)mh$.invokeExact(ale, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setString$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"ale_setString");
    }
    /**
     * {@snippet :
     * int ale_setString(ALEInterface_handle ale, char* key, char* value);
     * }
     */
    public static int ale_setString(MemorySegment ale, MemorySegment key, MemorySegment value) {
        var mh$ = ale_setString$MH();
        try {
            return (int)mh$.invokeExact(ale, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setInt$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"ale_setInt");
    }
    /**
     * {@snippet :
     * int ale_setInt(ALEInterface_handle ale, char* key, int value);
     * }
     */
    public static int ale_setInt(MemorySegment ale, MemorySegment key, int value) {
        var mh$ = ale_setInt$MH();
        try {
            return (int)mh$.invokeExact(ale, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setBool$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"ale_setBool");
    }
    /**
     * {@snippet :
     * int ale_setBool(ALEInterface_handle ale, char* key, _Bool value);
     * }
     */
    public static int ale_setBool(MemorySegment ale, MemorySegment key, boolean value) {
        var mh$ = ale_setBool$MH();
        try {
            return (int)mh$.invokeExact(ale, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setFloat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"ale_setFloat");
    }
    /**
     * {@snippet :
     * int ale_setFloat(ALEInterface_handle ale, char* key, float value);
     * }
     */
    public static int ale_setFloat(MemorySegment ale, MemorySegment key, float value) {
        var mh$ = ale_setFloat$MH();
        try {
            return (int)mh$.invokeExact(ale, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_loadROM$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"ale_loadROM");
    }
    /**
     * {@snippet :
     * int ale_loadROM(ALEInterface_handle ale, char* rom_file_path);
     * }
     */
    public static int ale_loadROM(MemorySegment ale, MemorySegment rom_file_path) {
        var mh$ = ale_loadROM$MH();
        try {
            return (int)mh$.invokeExact(ale, rom_file_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_act$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$6,"ale_act");
    }
    /**
     * {@snippet :
     * reward_t ale_act(ALEInterface_handle ale, Action action);
     * }
     */
    public static float ale_act(MemorySegment ale, int action) {
        var mh$ = ale_act$MH();
        try {
            return (float)mh$.invokeExact(ale, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_act_with_strength$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1,"ale_act_with_strength");
    }
    /**
     * {@snippet :
     * reward_t ale_act_with_strength(ALEInterface_handle ale, Action action, float paddle_strength);
     * }
     */
    public static float ale_act_with_strength(MemorySegment ale, int action, float paddle_strength) {
        var mh$ = ale_act_with_strength$MH();
        try {
            return (float)mh$.invokeExact(ale, action, paddle_strength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_game_over$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"ale_game_over");
    }
    /**
     * {@snippet :
     * _Bool ale_game_over(ALEInterface_handle ale, _Bool with_truncation);
     * }
     */
    public static boolean ale_game_over(MemorySegment ale, boolean with_truncation) {
        var mh$ = ale_game_over$MH();
        try {
            return (boolean)mh$.invokeExact(ale, with_truncation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_game_truncated$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"ale_game_truncated");
    }
    /**
     * {@snippet :
     * _Bool ale_game_truncated(ALEInterface_handle ale);
     * }
     */
    public static boolean ale_game_truncated(MemorySegment ale) {
        var mh$ = ale_game_truncated$MH();
        try {
            return (boolean)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_reset_game$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$0,"ale_reset_game");
    }
    /**
     * {@snippet :
     * void ale_reset_game(ALEInterface_handle ale);
     * }
     */
    public static void ale_reset_game(MemorySegment ale) {
        var mh$ = ale_reset_game$MH();
        try {
            mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getAvailableModes$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"ale_getAvailableModes");
    }
    /**
     * {@snippet :
     * int ale_getAvailableModes(ALEInterface_handle ale, game_mode_t* mode_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getAvailableModes(MemorySegment ale, MemorySegment mode_buffer, long buffer_size) {
        var mh$ = ale_getAvailableModes$MH();
        try {
            return (int)mh$.invokeExact(ale, mode_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setMode$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"ale_setMode");
    }
    /**
     * {@snippet :
     * int ale_setMode(ALEInterface_handle ale, game_mode_t mode);
     * }
     */
    public static int ale_setMode(MemorySegment ale, int mode) {
        var mh$ = ale_setMode$MH();
        try {
            return (int)mh$.invokeExact(ale, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getMode$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"ale_getMode");
    }
    /**
     * {@snippet :
     * game_mode_t ale_getMode(ALEInterface_handle ale);
     * }
     */
    public static int ale_getMode(MemorySegment ale) {
        var mh$ = ale_getMode$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getAvailableDifficulties$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$0,"ale_getAvailableDifficulties");
    }
    /**
     * {@snippet :
     * int ale_getAvailableDifficulties(ALEInterface_handle ale, difficulty_t* difficulty_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getAvailableDifficulties(MemorySegment ale, MemorySegment difficulty_buffer, long buffer_size) {
        var mh$ = ale_getAvailableDifficulties$MH();
        try {
            return (int)mh$.invokeExact(ale, difficulty_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setDifficulty$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"ale_setDifficulty");
    }
    /**
     * {@snippet :
     * int ale_setDifficulty(ALEInterface_handle ale, difficulty_t difficulty);
     * }
     */
    public static int ale_setDifficulty(MemorySegment ale, int difficulty) {
        var mh$ = ale_setDifficulty$MH();
        try {
            return (int)mh$.invokeExact(ale, difficulty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getDifficulty$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"ale_getDifficulty");
    }
    /**
     * {@snippet :
     * difficulty_t ale_getDifficulty(ALEInterface_handle ale);
     * }
     */
    public static int ale_getDifficulty(MemorySegment ale) {
        var mh$ = ale_getDifficulty$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getLegalActionSet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"ale_getLegalActionSet");
    }
    /**
     * {@snippet :
     * int ale_getLegalActionSet(ALEInterface_handle ale, Action* action_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getLegalActionSet(MemorySegment ale, MemorySegment action_buffer, long buffer_size) {
        var mh$ = ale_getLegalActionSet$MH();
        try {
            return (int)mh$.invokeExact(ale, action_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getMinimalActionSet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"ale_getMinimalActionSet");
    }
    /**
     * {@snippet :
     * int ale_getMinimalActionSet(ALEInterface_handle ale, Action* action_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getMinimalActionSet(MemorySegment ale, MemorySegment action_buffer, long buffer_size) {
        var mh$ = ale_getMinimalActionSet$MH();
        try {
            return (int)mh$.invokeExact(ale, action_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getFrameNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$5,"ale_getFrameNumber");
    }
    /**
     * {@snippet :
     * int ale_getFrameNumber(ALEInterface_handle ale);
     * }
     */
    public static int ale_getFrameNumber(MemorySegment ale) {
        var mh$ = ale_getFrameNumber$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_lives$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$0,"ale_lives");
    }
    /**
     * {@snippet :
     * int ale_lives(ALEInterface_handle ale);
     * }
     */
    public static int ale_lives(MemorySegment ale) {
        var mh$ = ale_lives$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getEpisodeFrameNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"ale_getEpisodeFrameNumber");
    }
    /**
     * {@snippet :
     * int ale_getEpisodeFrameNumber(ALEInterface_handle ale);
     * }
     */
    public static int ale_getEpisodeFrameNumber(MemorySegment ale) {
        var mh$ = ale_getEpisodeFrameNumber$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getScreenWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"ale_getScreenWidth");
    }
    /**
     * {@snippet :
     * int ale_getScreenWidth(ALEInterface_handle ale);
     * }
     */
    public static int ale_getScreenWidth(MemorySegment ale) {
        var mh$ = ale_getScreenWidth$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getScreenHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"ale_getScreenHeight");
    }
    /**
     * {@snippet :
     * int ale_getScreenHeight(ALEInterface_handle ale);
     * }
     */
    public static int ale_getScreenHeight(MemorySegment ale) {
        var mh$ = ale_getScreenHeight$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getScreenGrayscale$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"ale_getScreenGrayscale");
    }
    /**
     * {@snippet :
     * int ale_getScreenGrayscale(ALEInterface_handle ale, unsigned char* output_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getScreenGrayscale(MemorySegment ale, MemorySegment output_buffer, long buffer_size) {
        var mh$ = ale_getScreenGrayscale$MH();
        try {
            return (int)mh$.invokeExact(ale, output_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getScreenRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"ale_getScreenRGB");
    }
    /**
     * {@snippet :
     * int ale_getScreenRGB(ALEInterface_handle ale, unsigned char* output_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getScreenRGB(MemorySegment ale, MemorySegment output_buffer, long buffer_size) {
        var mh$ = ale_getScreenRGB$MH();
        try {
            return (int)mh$.invokeExact(ale, output_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getAudio$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"ale_getAudio");
    }
    /**
     * {@snippet :
     * int ale_getAudio(ALEInterface_handle ale, uint8_t* output_buffer, size_t buffer_size);
     * }
     */
    public static int ale_getAudio(MemorySegment ale, MemorySegment output_buffer, long buffer_size) {
        var mh$ = ale_getAudio$MH();
        try {
            return (int)mh$.invokeExact(ale, output_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getRAMSize$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"ale_getRAMSize");
    }
    /**
     * {@snippet :
     * int ale_getRAMSize(ALEInterface_handle ale);
     * }
     */
    public static int ale_getRAMSize(MemorySegment ale) {
        var mh$ = ale_getRAMSize$MH();
        try {
            return (int)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_getRAM$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"ale_getRAM");
    }
    /**
     * {@snippet :
     * byte_t ale_getRAM(ALEInterface_handle ale, size_t memory_index);
     * }
     */
    public static byte ale_getRAM(MemorySegment ale, long memory_index) {
        var mh$ = ale_getRAM$MH();
        try {
            return (byte)mh$.invokeExact(ale, memory_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_setRAM$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"ale_setRAM");
    }
    /**
     * {@snippet :
     * int ale_setRAM(ALEInterface_handle ale, size_t memory_index, byte_t value);
     * }
     */
    public static int ale_setRAM(MemorySegment ale, long memory_index, byte value) {
        var mh$ = ale_setRAM$MH();
        try {
            return (int)mh$.invokeExact(ale, memory_index, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_cloneState$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"ale_cloneState");
    }
    /**
     * {@snippet :
     * ALEState_handle ale_cloneState(ALEInterface_handle ale, _Bool include_rng);
     * }
     */
    public static MemorySegment ale_cloneState(MemorySegment ale, boolean include_rng) {
        var mh$ = ale_cloneState$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ale, include_rng);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_restoreState$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"ale_restoreState");
    }
    /**
     * {@snippet :
     * int ale_restoreState(ALEInterface_handle ale, const ALEState_handle state);
     * }
     */
    public static int ale_restoreState(MemorySegment ale, MemorySegment state) {
        var mh$ = ale_restoreState$MH();
        try {
            return (int)mh$.invokeExact(ale, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_cloneSystemState$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"ale_cloneSystemState");
    }
    /**
     * {@snippet :
     * ALEState_handle ale_cloneSystemState(ALEInterface_handle ale);
     * }
     */
    public static MemorySegment ale_cloneSystemState(MemorySegment ale) {
        var mh$ = ale_cloneSystemState$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_restoreSystemState$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"ale_restoreSystemState");
    }
    /**
     * {@snippet :
     * int ale_restoreSystemState(ALEInterface_handle ale, const ALEState_handle state);
     * }
     */
    public static int ale_restoreSystemState(MemorySegment ale, MemorySegment state) {
        var mh$ = ale_restoreSystemState$MH();
        try {
            return (int)mh$.invokeExact(ale, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_destroyState$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0,"ale_destroyState");
    }
    /**
     * {@snippet :
     * void ale_destroyState(ALEState_handle state);
     * }
     */
    public static void ale_destroyState(MemorySegment state) {
        var mh$ = ale_destroyState$MH();
        try {
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_saveScreenPNG$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"ale_saveScreenPNG");
    }
    /**
     * {@snippet :
     * int ale_saveScreenPNG(ALEInterface_handle ale, char* filename);
     * }
     */
    public static int ale_saveScreenPNG(MemorySegment ale, MemorySegment filename) {
        var mh$ = ale_saveScreenPNG$MH();
        try {
            return (int)mh$.invokeExact(ale, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_createScreenExporter$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"ale_createScreenExporter");
    }
    /**
     * {@snippet :
     * ScreenExporter_handle ale_createScreenExporter(ALEInterface_handle ale, char* path);
     * }
     */
    public static MemorySegment ale_createScreenExporter(MemorySegment ale, MemorySegment path) {
        var mh$ = ale_createScreenExporter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ale, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_destroyScreenExporter$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"ale_destroyScreenExporter");
    }
    /**
     * {@snippet :
     * void ale_destroyScreenExporter(ScreenExporter_handle exporter);
     * }
     */
    public static void ale_destroyScreenExporter(MemorySegment exporter) {
        var mh$ = ale_destroyScreenExporter$MH();
        try {
            mh$.invokeExact(exporter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_isSupportedROM$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"ale_isSupportedROM");
    }
    /**
     * {@snippet :
     * int ale_isSupportedROM(char* rom_file_path, char* output_md5_buffer, size_t buffer_size);
     * }
     */
    public static int ale_isSupportedROM(MemorySegment rom_file_path, MemorySegment output_md5_buffer, long buffer_size) {
        var mh$ = ale_isSupportedROM$MH();
        try {
            return (int)mh$.invokeExact(rom_file_path, output_md5_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ale_welcomeMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"ale_welcomeMessage");
    }
    /**
     * {@snippet :
     * int ale_welcomeMessage(char* output_buffer, size_t buffer_size);
     * }
     */
    public static int ale_welcomeMessage(MemorySegment output_buffer, long buffer_size) {
        var mh$ = ale_welcomeMessage$MH();
        try {
            return (int)mh$.invokeExact(output_buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$12.const$2;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static byte INT8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static short INT16_MAX() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static byte UINT8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static short UINT16_MAX() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static byte INT_LEAST8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static short INT_LEAST16_MAX() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static byte UINT_LEAST8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static short UINT_LEAST16_MAX() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -2147483648
     * }
     */
    public static int INT_FAST16_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static byte INT_FAST8_MAX() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 2147483647
     * }
     */
    public static int INT_FAST16_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static byte UINT_FAST8_MAX() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX 4294967295
     * }
     */
    public static int UINT_FAST16_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
}


